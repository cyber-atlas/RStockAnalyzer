geom_histogram(binwidth = 2, color="blue",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'green')
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'green')
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkgreen')
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
hist(Returns)
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 1))
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
ggtitle("frequency of percentage change")
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
ggtitle("Frequency of Daily Percentage Change")
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")+
ylab("Number of Occurances")
library('quantmod')
library(tidyquant)
library('forecast')
library('ggplot2')
getSymbols("SPY", src="yahoo", from="2019-01-01")
getSymbols("AAPL", src="yahoo", from="2019-01-01")
chartSeries(SPY)+add_TA()
library('quantmod')
library(tidyquant)
library('forecast')
library('ggplot2')
getSymbols("SPY", src="yahoo", from="2019-01-01")
getSymbols("AAPL", src="yahoo", from="2019-01-01")
chartSeries(SPY)+add_TA()
library('quantmod')
library(tidyquant)
library('forecast')
library('ggplot2')
getSymbols("SPY", src="yahoo", from="2019-01-01")
getSymbols("AAPL", src="yahoo", from="2019-01-01")
chartSeries(SPY)+add_TA()
chartSeries(SPY)
library('quantmod')
library(tidyquant)
library('forecast')
library('ggplot2')
getSymbols("SPY", src="yahoo", from="2019-01-01")
getSymbols("AAPL", src="yahoo", from="2019-01-01")
chartSeries(SPY)
Returns <- diff(SPY$SPY.Close)/lag(SPY$SPY.Close, k=1)*1000
tail(Returns, 10)
Returns<-fortify(Returns)
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 25, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")+
ylab("Number of Occurances")
#hist(Returns)
arimaData <- auto.arima(SPY$SPY.Close)
arimaData
chartSeries(as.ts(SPY$SPY.Close))
lines(fitted(arimaData), col='red')
# fit.forecast <- forecast.Arima(arimaData)
fit.forecast <- forecast(arimaData)
fit.forecast
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-25, 35, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 18, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")+
ylab("Number of Occurances")
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 18, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")+
ylab("Number of Occurances")
chartSeries(fit.forecast)
plot(fit.forecast)
ggplot(fit.forecast)
plot(fit.forecast)
knitr::opts_chunk$set(echo = TRUE)
library("dplyr")
library("tidyr")
library("tidyverse")
library("ggplot2")
library("readxl")
library("ggrepel")
library("RColorBrewer")
#install.packages("tseries")
#https://cran.r-project.org/src/contrib/Archive/forecast/
#install.packages("uroot")
#install.packages("nnet")
#install.packages("~/Downloads/forecast_8.4.tar", repos = NULL)
#https://cran.r-project.org/src/contrib/Archive/quadprog/
#install.packages("~/Downloads/quadprog_1.5-5.tar", repos = NULL)
#install.packages("tidyquant")
library("tidyquant")
#install.packages("quantmod")
library("quantmod")
#install.packages("magrittr")
library('magrittr')
#Define start and End dates
start <- as.Date("2018-01-01")
end <- as.Date("2019-04-01")
?getSymbols
getSymbols(c("BA", "EADSF"), src="yahoo", from = start, to = end)
plot(BA[, "BA.Close"], main = "BA")
plot(EADSF[, "EADSF.Close"], main = "EADSF")
#https://www.axios.com/boeing-737-max-crash-what-know-a5087b8e-1787-4de5-bece-d1350d5695cf.html
#On 29 October 2018, the Boeing 737 MAX 8 operating the route crashed into the Java Sea 12 minutes after takeoff, killing all 189 passengers and crew.
#On 10 March 2019, the Boeing 737 MAX 8 aircraft which operated the flight crashed near the town of Bishoftu six minutes after takeoff, killing all 157 people aboard.
#https://stackoverflow.com/questions/3386850/how-can-i-change-xts-to-data-frame-and-keep-index
ba_df <- data.frame(date=index(BA), coredata(BA)) %>%
mutate(BA.day_difference = BA.High-BA.Low) %>%
mutate(BA.scale_max = BA.Close/max(BA.Close))
eadsf_df <- data.frame(date=index(EADSF), coredata(EADSF)) %>%
mutate(EADSF.day_difference = EADSF.High-EADSF.Low) %>%
mutate(EADSF.scale_max = EADSF.Close/max(EADSF.Close))
ggplot(ba_df, aes(x=date, y=BA.scale_max))+
coord_cartesian(xlim=c(start+20, end-20), ylim=c(0.66, 1))+
geom_line(color="#0039a6")+
geom_line(data=eadsf_df, aes(y=EADSF.scale_max), color="#74d2e7")+
scale_x_date(date_labels = "%b %y", date_breaks = "1 month")+
ylab("closing value")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1))+
geom_vline(xintercept = as.Date("2018-10-29"), size=0.5, linetype="dotted")+
geom_vline(xintercept = as.Date("2019-03-10"), size=0.5, linetype="dotted")+
annotate("text", x=as.Date("2018-10-29"),
y=0.65, label="Lion Air 737 Max 8", angle=90, vjust=-0.5, hjust=0, size=3)+
annotate("text", x=as.Date("2019-03-10"),
y=0.65, label="Ethiopian Airlines 737 Max 8", angle=90, vjust=-0.5, hjust=0, size=3)
ggplot(ba_df, aes(x=date, y=BA.day_difference/max(ba_df$BA.Close)))+
coord_cartesian(xlim=c(start+20, end-20), ylim=c(0, 0.085))+
geom_line(color="#0039a6")+
geom_line(data=eadsf_df, aes(y=EADSF.day_difference/max(eadsf_df$EADSF.Close)), color="#74d2e7")+
scale_x_date(date_labels = "%b %y", date_breaks = "1 month")+
ylab("daily volatility")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1))+
geom_vline(xintercept = as.Date("2018-10-29"), size=0.5, linetype="dotted")+
geom_vline(xintercept = as.Date("2019-03-10"), size=0.5, linetype="dotted")+
#MAX 8 crash dates
annotate("text", x=as.Date("2018-10-29"),
y=0.0875, label="Lion Air 737 Max 8", angle=90, vjust=-0.5, hjust=1, size=3)+
annotate("text", x=as.Date("2019-03-10"),
y=0.0875, label="Ethiopian Airlines 737 Max 8", angle=90, vjust=-0.5, hjust=1, size=3)+
#trade volatility inflection points of interest
annotate("text", x=as.Date("2018-02-05"),
y=32.609985/max(ba_df$BA.Close), label="A", vjust=-0.5, hjust=0.5, size=3)+
annotate("text", x=as.Date("2018-04-24"),
y=24.390014/max(ba_df$BA.Close), label="B", vjust=-0.5, hjust=0.5, size=3)+
annotate("text", x=as.Date("2018-11-20"),
y=25.570008/max(ba_df$BA.Close), label="C", vjust=-0.5, hjust=0.5, size=3)+
annotate("text", x=as.Date("2018-12-26"),
y=21.619995/max(ba_df$BA.Close), label="D", vjust=-0.5, hjust=0.5, size=3)
#https://cran.r-project.org/web/packages/tidyquant/vignettes/TQ04-charting-with-tidyquant.html
ba_df <- mutate(ba_df, BA.SMA = SMA(unlist(ba_df[,2]), n=20)) %>%
#mutate(below_SMA = BA.Close < BA.SMA)
mutate(below_SMA = ifelse(BA.Close < BA.SMA, 1000, 0))
ggplot(ba_df, aes(x = date, y = BA.Close, open = BA.Open,
high = BA.High, low = BA.Low, close = BA.Close))+
coord_cartesian(xlim=c(start+48, end-22), #+20, end-20),
ylim=c(min(ba_df$BA.Close), max(ba_df$BA.Close)))+
geom_bar(aes(y=below_SMA), color="#ffb3b3", stat="identity", width=1)+
geom_line(color="#0039a6")+ #geom_candlestick()+
geom_bbands(ma_fun = SMA, sd = 2, n = 20)+
labs(title = "AAPL Candlestick Chart",
subtitle = "BBands with SMA Applied",
y = "Closing Price", x = "date")+
#theme_tq()
scale_x_date(date_labels = "%b %y", date_breaks = "1 month")+
ylab("closing value")+
theme(axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1))
library('quantmod')
# library(tidyquant)
library('forecast')
getSymbols("SPY", src="yahoo", from="2019-01-01")
chartSeries(SPY)
Returns <- diff(SPY$SPY.Close)/lag(SPY$SPY.Close, k=1)*1000
tail(Returns, 10)
hist(Returns)
# arimaData <- auto.arima(SPY$SPY.Close, ic="bic")
# fit <- auto.arima(SPY$SPY.Close, ic="bic")
arimaData <- auto.arima(SPY$SPY.Close)
# fit<- auto.arima(SPY$SPY.Close)
arimaData
# plot(as.ts(SPY$SPY.Close) )
# lines(fitted(arimaData), col="red")
# lines(fitted(fit), col="green")
chartSeries(as.ts(SPY$SPY.Close))
lines(fitted(arimaData), col='red')
# fit.forecast <- forecast.Arima(arimaData)
fit.forecast <- forecast(arimaData)
fit.forecast
candleChart(SPY, up.col="green", dn.col="red", theme="white")
# install.packages("quantmod")
library('quantmod')
library('ggplot2')
# install.packages("magrittr")
library('magrittr')
# install.packages("tidyquant")
library('tidyquant')
#Define start and End dates
start <- as.Date("2018-04-25")
end <- as.Date("2019-04-25")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Charts the prices of the SPY 500
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds the simple moving average
plot(addSMA(n = 20))
#Extract taht data
#use function lines t
candleChart(SPY, up.col="green", dn.col="red", theme="white")
addMACD()
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds Bollinger Bands
addBBands()
chartSeries(AMD, type='candlesticks')
#Now let's add Bollinger Bands to it
addBBands()
#Can merge data
head(as.xts(merge(AMD, AAPL)))
#Trying a differnt (cleaner way to get the data)
SPY2 <- tq_get("SPY")
# SPY2 %>%
#     tq_mutate(x_fun = Cl, mutate_fun = SMA, n = 20) %>%
#     rename(SMA.20 = SMA)
# Had a bunch of issues with the mutate functions that were provided by the library
# unzip(A)
SPY2 %<>%
mutate(SMA.close = SMA(unlist(SPY2[,2]), n=20))
head(SPY2,30)
addBBands()
chartSeries(SPY, type='candlesticks')
addBBands()
# install.packages("quantmod")
library('quantmod')
library('ggplot2')
# install.packages("magrittr")
library('magrittr')
# install.packages("tidyquant")
library('tidyquant')
#Define start and End dates
start <- as.Date("2018-04-25")
end <- as.Date("2019-04-25")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
# install.packages("quantmod")
library('quantmod')
library('ggplot2')
# install.packages("magrittr")
library('magrittr')
# install.packages("tidyquant")
library('tidyquant')
#Define start and End dates
start <- as.Date("2018-04-25")
end <- as.Date("2019-04-25")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Charts the prices of the SPY 500
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds the simple moving average
plot(addSMA(n = 20))
#Extract taht data
#use function lines t
candleChart(SPY, up.col="green", dn.col="red", theme="white")
addMACD()
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds Bollinger Bands
addBBands()
chartSeries(SPY, type='candlesticks')
addBBands()
#TODO
chartSeries(AMD, type='candlesticks')
#Now let's add Bollinger Bands to it
addBBands()
#Can merge data
head(as.xts(merge(AMD, AAPL)))
#Trying a differnt (cleaner way to get the data)
SPY2 <- tq_get("SPY")
# SPY2 %>%
#     tq_mutate(x_fun = Cl, mutate_fun = SMA, n = 20) %>%
#     rename(SMA.20 = SMA)
# Had a bunch of issues with the mutate functions that were provided by the library
# unzip(A)
SPY2 %<>%
mutate(SMA.close = SMA(unlist(SPY2[,2]), n=20))
head(SPY2,30)
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
chartSeries(SPY, type='candlesticks')+addBBands(n=20)
chartSeries(SPY, type='candlesticks') addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, draw='width')
# install.packages("quantmod")
library('quantmod')
library('ggplot2')
# install.packages("magrittr")
library('magrittr')
# install.packages("tidyquant")
library('tidyquant')
#Define start and End dates
start <- as.Date("2018-04-25")
end <- as.Date("2019-04-25")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Define start and End dates
start <- as.Date("2019-01-01")
end <- as.Date("2019-04-26")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, draw='width')
addBBands(n=20')
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
addBBands(n=20, on=-1)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=-1)
addBBands(n=20, on=5)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=5)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=5)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=0)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=1)
addBBands(n=20, on=-2)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=-2)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=-2)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=-2)
chartSeries(SPY, type='candlesticks')
addBBands(n=20, on=-1)
addBBands(n=20)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
#Define start and End dates
start <- as.Date("2018-12-01")
end <- as.Date("2019-04-26")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
#Define start and End dates
start <- as.Date("2018-11-01")
end <- as.Date("2019-04-26")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
chartSeries(SPY, type='candlesticks')
addBBands(n=20)
library('quantmod')
library(tidyquant)
library('forecast')
library('ggplot2')
getSymbols("SPY", src="yahoo", from="2019-01-01")
getSymbols("AAPL", src="yahoo", from="2019-01-01")
chartSeries(SPY)
Returns <- diff(SPY$SPY.Close)/lag(SPY$SPY.Close, k=1)*1000
tail(Returns, 10)
Returns<-fortify(Returns)
ggplot(Returns, aes(x=SPY.Close) )+
geom_histogram(binwidth = 2, color="black",fill="white",center=0)+
scale_x_continuous(breaks=seq(-26, 36, 2))+
geom_vline(xintercept = 0, col = 'darkred')+
scale_y_continuous(breaks=seq(-1, 18, 2))+
ggtitle("Frequency of Daily Percentage Change")+
xlab("Percentage Difference")+
ylab("Number of Occurances")
#hist(Returns)
arimaData <- auto.arima(SPY$SPY.Close)
arimaData
chartSeries(as.ts(SPY$SPY.Close))
lines(fitted(arimaData), col='red')
# fit.forecast <- forecast.Arima(arimaData)
fit.forecast <- forecast(arimaData)
fit.forecast
plot(fit.forecast)
chartSeries(fit.forecast)
plot(fit.forecast, xlab="X-axis label", ylab="y-axix label")
plot(fit.forecast, xlab="Price", ylab="Trading Day in 2019. 4/26 was the 80th Day")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", text(81, labels="The start of our Predictions"))
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
text(81, labels="The start of our Predictions")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
text(81, labels="The start of our Predictions")
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 1, tick = 1)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 1, tick = 1)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 1, tick = 1)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
axis(side = 0, tick = 1)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 0, tick = 1)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 2, tick = 2)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
axis(side = 2, tick = 4)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
axis(side = 2, tick = 4)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(1, 100), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(1, 100), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(1, 91), xaxt='n')
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(1, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(0, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(0, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
# Now, define a custom axis
axis(side = 1, at=1:91, labels = 1:91)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(0, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91, labels = 1:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
# Now, define a custom axis
axis(side = 1, at=1:91, labels = 0:91)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(0, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=0:91, labels = 0:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
# Now, define a custom axis
axis(side = 1, at=1:91, labels = 1:91)
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xlim=c(1, 91), xaxt='n')
# Now, define a custom axis
axis(side = 1, at=1:91, labels = 1:91)
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day", xaxt='n')
# Now, define a custom axis
# text(wt, mpg, row.names(mtcars), cex=0.6, pos=4, col="red")
plot(fit.forecast, ylab="Price", xlab="Trading Day in 2019. 4/26 was the 80th Day")
