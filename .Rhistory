countaccgroup = inner_join(countaccgroup,counties, by=c("County_Name","State Name"="region"))
#This makes the levels we are going to put in the factor
totCrashGroups <- seq(min(countaccgroup$total_crashes),35640, len=15)
#Apply the levels to the factors and to the dataframe
countaccgroup$totCrashGroups <- as.factor(cut(countaccgroup$total_crashes, totCrashGroups))
#Another attempt at the above worksish
# countaccgroup$totCrashGroups <- as.factor(as.numeric(cut(countaccgroup$total_crashes, seq(min(countaccgroup$total_crashes),max(countaccgroup$total_crashes), len=15))))
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#Notes revisited
# ggplot(countaccgroup, aes(x = long, y = lat))+
#   geom_polygon(aes(group=group,fill=totCrashGroups)) +
#   geom_path(aes(group=group))+
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes"))+
#   theme(panel.background = element_rect(fill = "white"))
# scale_fill_gradient2(limits=c(0,250000))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
#THE GUIDE
# ggplot(countaccgroup, aes(x = long, y = lat, group=group)) +
#   geom_polygon(aes(fill=totCrashGroups)) +
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes")) +
#     # scale_fill_gradient2(limits=c(0,250000))
#     # scale_fill_gradient2()
#   scale_fill_continuous(low="white",high = ("dark red"))
# THE OG
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#OG code
countaccgroup%>%group_by("County_Name") %>% ggplot(aes(x = long, y = lat,fill=log(total_crashes))) + geom_polygon(aes(group=group)) + ggtitle("Crashes Per County")  + guides(fill=guide_legend("Total Crashes")) + scale_fill_continuous(low="white",high = ("red"))
#Another one of my attempts
countaccgroup %>% group_by("County_Name")
countaccgroup %>% group_by("group") %>%
ggplot(aes(x = long, y = lat,fill=totCrashGroups)) +
geom_polygon(aes(group=group))+
ggtitle("Crashes Per County")  +
guides(fill=guide_legend("Total Crashes"))
# scale_fill_gradient2(limits=c(0,250000))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
View(countaccgroup)
#Apply the levels to the factors and to the dataframe
countaccgroup$totCrashGroups <- as.factor(cut(countaccgroup$total_crashes, c( totCrashGroups,max(countaccgroup$total_crashes))))
#TODO makesure the column types are the same on the join
GLC = readxl::read_xlsx("GLC.xlsx")
colnames(GLC) = GLC[1, ]
GLC = GLC[-1, ]
# names(GLC)
#head(GLC)
counties = map_data("county")
class(counties)
names(counties)
head(counties)
names(GLC)[6] = "COUNTY"
names(GLC)[7] = "County_Name"
GLC$COUNTY <- as.numeric(GLC$COUNTY)
GLC$COUNTY = factor(GLC$COUNTY)
GLC$`State Code` =  as.integer(GLC$`State Code`)
acc$COUNTY = factor(acc$COUNTY)
names(counties)[6] = "County_Name"
countacc = inner_join(acc,GLC, by= c("COUNTY"="COUNTY", "STATE" = "State Code")) %>%
select(LATITUDE,LONGITUD,COUNTY,"County_Name",DAY,MONTH,YEAR,HOUR,"State Name")
countacc = countacc %>% mutate(County_Name = tolower(County_Name))
countacc = countacc %>% mutate("State Name" = tolower(countacc$`State Name`))
countaccgroup = countacc %>% group_by(County_Name,`State Name`) %>% summarise(total_crashes = n())
# countaccgroup = left_join(countaccgroup,counties, by=c("County_Name","State Name"="region"))
countaccgroup = inner_join(countaccgroup,counties, by=c("County_Name","State Name"="region"))
#This makes the levels we are going to put in the factor
totCrashGroups <- seq(min(countaccgroup$total_crashes),35640, len=15)
#Apply the levels to the factors and to the dataframe
countaccgroup$totCrashGroups <- as.factor(cut(countaccgroup$total_crashes, c( totCrashGroups,max(countaccgroup$total_crashes))))
#Another attempt at the above worksish
# countaccgroup$totCrashGroups <- as.factor(as.numeric(cut(countaccgroup$total_crashes, seq(min(countaccgroup$total_crashes),max(countaccgroup$total_crashes), len=15))))
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#Notes revisited
# ggplot(countaccgroup, aes(x = long, y = lat))+
#   geom_polygon(aes(group=group,fill=totCrashGroups)) +
#   geom_path(aes(group=group))+
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes"))+
#   theme(panel.background = element_rect(fill = "white"))
# scale_fill_gradient2(limits=c(0,250000))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
#THE GUIDE
# ggplot(countaccgroup, aes(x = long, y = lat, group=group)) +
#   geom_polygon(aes(fill=totCrashGroups)) +
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes")) +
#     # scale_fill_gradient2(limits=c(0,250000))
#     # scale_fill_gradient2()
#   scale_fill_continuous(low="white",high = ("dark red"))
# THE OG
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#OG code
countaccgroup%>%group_by("County_Name") %>% ggplot(aes(x = long, y = lat,fill=log(total_crashes))) + geom_polygon(aes(group=group)) + ggtitle("Crashes Per County")  + guides(fill=guide_legend("Total Crashes")) + scale_fill_continuous(low="white",high = ("red"))
#Another one of my attempts
countaccgroup %>% group_by("County_Name")
countaccgroup %>% group_by("group") %>%
ggplot(aes(x = long, y = lat,fill=totCrashGroups)) +
geom_polygon(aes(group=group))+
ggtitle("Crashes Per County")  +
guides(fill=guide_legend("Total Crashes"))
# scale_fill_gradient2(limits=c(0,250000))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
countaccgroup %>% group_by("group") %>%
ggplot(aes(x = long, y = lat,fill=totCrashGroups)) +
geom_polygon(aes(group=group))+
ggtitle("Crashes Per County")  +
guides(fill=guide_legend("Total Crashes"))+
# scale_fill_gradient2(limits=c(0,250000))
scale_fill_gradient2()
countaccgroup %>% group_by("group") %>%
ggplot(aes(x = long, y = lat,fill=totCrashGroups)) +
geom_polygon(aes(group=group))+
ggtitle("Crashes Per County")  +
guides(fill=guide_legend("Total Crashes"))
library(ggplot2)
library(tidyverse)
library('dplyr')
library('maps')
#acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
acc<- read.csv('accident.csv', stringsAsFactors = FALSE)
class(acc)
person <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv")
#person <- read.csv('person.csv', stringsAsFactors = FALSE)
class(acc$DAY_WEEK)
acc$DAY_WEEK <- factor(acc[,'DAY_WEEK'])
levels(acc$DAY_WEEK) <- list("Sunday" = 1, 'Monday'=2, 'Tuesday'=3, 'Wednesday'=4, 'Thursday'=5, 'Friday'=6, 'Saturday'=7)
# levels(acc$DAY_WEEK)
ggplot(data=acc, aes(x=DAY_WEEK, fill= DAY_WEEK))+
geom_bar()+
#geom_bar(aes(y=stat(count)))+
geom_text(stat='count', aes(label=..count..), vjust = -.5)+
scale_y_continuous(limits=c(0,6500))+
theme(axis.text.x = element_text(angle =45, hjust=1))
class(acc$HOUR)
acc$HOUR<- factor(acc[,'HOUR'])
levels(acc$HOUR)[levels(acc$HOUR) == 99] <- "unknown"
# levels(acc$HOUR)
ggplot(data=acc, aes(x=HOUR, fill= stat(count), color=HOUR))+
#fill=stat(count)))+
geom_bar()+
#geom_bar(aes(y=stat(count)))+
geom_text(stat='count', aes(label=..count..), angle=90,hjust = -.5)+
scale_y_continuous(limits=c(0,2500))+
theme(axis.text.x = element_text(angle =75, hjust=1))+
ggtitle("Number of Crashes Each Hour") + guides(fill=guide_legend("Days of the Month"))
#TODO makesure the column types are the same on the join
GLC = readxl::read_xlsx("GLC.xlsx")
colnames(GLC) = GLC[1, ]
GLC = GLC[-1, ]
# names(GLC)
#head(GLC)
counties = map_data("county")
class(counties)
names(counties)
head(counties)
names(GLC)[6] = "COUNTY"
names(GLC)[7] = "County_Name"
GLC$COUNTY <- as.numeric(GLC$COUNTY)
GLC$COUNTY = factor(GLC$COUNTY)
GLC$`State Code` =  as.integer(GLC$`State Code`)
acc$COUNTY = factor(acc$COUNTY)
names(counties)[6] = "County_Name"
countacc = inner_join(acc,GLC, by= c("COUNTY"="COUNTY", "STATE" = "State Code")) %>%
select(LATITUDE,LONGITUD,COUNTY,"County_Name",DAY,MONTH,YEAR,HOUR,"State Name")
countacc = countacc %>% mutate(County_Name = tolower(County_Name))
countacc = countacc %>% mutate("State Name" = tolower(countacc$`State Name`))
countaccgroup = countacc %>% group_by(County_Name,`State Name`) %>% summarise(total_crashes = n())
# countaccgroup = left_join(countaccgroup,counties, by=c("County_Name","State Name"="region"))
countaccgroup = left_join(countaccgroup,counties, by=c("County_Name","State Name"="region"))
#This makes the levels we are going to put in the factor
totCrashGroups <- quantile(countaccgroup$total_crashes, c(0.0, .25, .50, .75, 1.0))
#Apply the levels to the factors and to the dataframe
countaccgroup$totCrashGroups <- as.factor(cut(countaccgroup$total_crashes, totCrashGroups))
#Another attempt at the above worksish
# countaccgroup$totCrashGroups <- as.factor(as.numeric(cut(countaccgroup$total_crashes, seq(min(countaccgroup$total_crashes),max(countaccgroup$total_crashes), len=15))))
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#Notes revisited
# ggplot(countaccgroup, aes(x = long, y = lat))+
#   geom_polygon(aes(group=group,fill=totCrashGroups)) +
#   geom_path(aes(group=group))+
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes"))+
#   theme(panel.background = element_rect(fill = "white"))
# scale_fill_gradient2(limits=c(0,250000))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
#THE GUIDE
# ggplot(countaccgroup, aes(x = long, y = lat, group=group)) +
#   geom_polygon(aes(fill=totCrashGroups)) +
#   ggtitle("Crashes Per County")  +
#   guides(fill=guide_legend("Total Crashes")) +
#     # scale_fill_gradient2(limits=c(0,250000))
#     # scale_fill_gradient2()
#   scale_fill_continuous(low="white",high = ("dark red"))
# THE OG
#We had this originally before the factor level
# countaccgroup %>% group_by("group")%>%
# TODO fix the scale jeez
#OG code
countaccgroup%>%group_by("County_Name") %>% ggplot(aes(x = long, y = lat,fill=total_crashes)) + geom_polygon(aes(group=group)) + ggtitle("Crashes Per County")  + guides(fill=guide_legend("Total Crashes")) + scale_fill_continuous(low="white",high = ("red"))
#Another one of my attempts
countaccgroup %>% group_by("County_Name")
countaccgroup %>% group_by("group") %>%
ggplot(aes(x = long, y = lat,fill=totCrashGroups)) +
geom_polygon(aes(group=group))+
ggtitle("Crashes Per County")  +
guides(fill=guide_legend("Total Crashes"))
# scale_fill_gradient2()
# scale_fill_continuous(low="white",high = ("dark red"))
class(acc$HOUR)
levels(acc$'DRUNK_DR')
class(acc$DRUNK_DR)
acc$DRUNK_DR<- factor(acc[,'DRUNK_DR'])
#levels(acc$DAY_WEEK) <- list("Sunday" = 1, 'Monday'=2, 'Tuesday'=3, 'Wednesday'=4, 'Thursday'=5, 'Friday'=6, 'Saturday'=7)
levels(acc$'DRUNK_DR')[levels(acc$'DRUNK_DR') == 3] <- "unknown"
levels(acc$'DRUNK_DR')
ggplot(data=acc, aes(x=DRUNK_DR, fill=DRUNK_DR, color=stat(count)))+
#fill=stat(count)))+
geom_bar()+
# geom_bar(aes(y=frequency(DRUNK_DR)))+
geom_text(stat='count', aes(label=..count..), angle=0,vjust = -.1)
#scale_y_continuous(limits=c(0,3000))
#theme(axis.text.x = element_text(angle =75, hjust=1))
#facet_wrap(~DRUNK_DR)
class(counties)
class(counties)
names(counties)
head(counties)
# library('ggplot2')
# library('dplyr')
library('tidyverse')
library('maps')
acc<- read.csv('accident.csv', stringsAsFactors = FALSE)
# acc <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/accident.csv", stringsAsFactors = FALSE)
# person <- read.csv("https://raw.githubusercontent.com/xdaiISU/ds202materials/master/hwlabs/fars2017/person.csv")
person <- read.csv('person.csv', stringsAsFactors = FALSE)
# names(acc)
# person$PER_TYP
# names(person)
class(acc$DAY_WEEK)
acc$DAY_WEEK <- factor(acc[,'DAY_WEEK'])
levels(acc$DAY_WEEK) <- list("Sunday" = 1, 'Monday'=2, 'Tuesday'=3, 'Wednesday'=4, 'Thursday'=5, 'Friday'=6, 'Saturday'=7)
levels(acc$DAY_WEEK)
ggplot(data=acc, aes(x=DAY_WEEK, color= DAY_WEEK, fill=stat(count)))+
geom_bar()+
#geom_bar(aes(y=stat(count)))+
geom_text(stat='count', aes(label=..count..), vjust = -.5)+
scale_y_continuous(limits=c(0,6500))+
theme(axis.text.x = element_text(angle =45, hjust=1))
class(acc$HOUR)
acc$HOUR<- factor(acc[,'HOUR'])
levels(acc$HOUR)[levels(acc$HOUR) == 99] <- "unknown"
levels(acc$HOUR)
ggplot(data=acc, aes(x=HOUR, fill= stat(count)))+
#fill=stat(count)))+
geom_bar()+
#geom_bar(aes(y=stat(count)))+
geom_text(stat='count', aes(label=..count..), angle=90,hjust = -.5)+
scale_y_continuous(limits=c(0,2500))+
theme(axis.text.x = element_text(angle =75, hjust=1))
class(acc$DRUNK_DR)
acc$DRUNK_DR<- factor(acc[,'DRUNK_DR'])
#levels(acc$DAY_WEEK) <- list("Sunday" = 1, 'Monday'=2, 'Tuesday'=3, 'Wednesday'=4, 'Thursday'=5, 'Friday'=6, 'Saturday'=7)
levels(acc$'DRUNK_DR')
ggplot(data=acc, aes(x=DRUNK_DR, color=DRUNK_DR))+
#fill=stat(count)))+
geom_bar()+
# geom_bar(aes(y=frequency(DRUNK_DR)))+
geom_text(stat='count', aes(label=..count..), angle=0,vjust = -.1)
#scale_y_continuous(limits=c(0,3000))
#theme(axis.text.x = element_text(angle =75, hjust=1))
#facet_wrap(~DRUNK_DR)
#Drivers are person type 1, so only select those
drivers <- person %>% filter(PER_TYP == 1)
driversAccByCase <- inner_join(drivers, acc, by = "ST_CASE")
head(driversAccByCase)
ggplot(driversAccByCase, aes(x=factor(HOUR.y), fill=factor(SEX)))+
geom_bar()+
facet_wrap(~DAY_WEEK)+
theme(axis.text.x = element_text(angle =75, hjust=1, size= 8))
# geom_text(stat='count', aes(label=..count..), angle=90,hjust = -.5)
#Import the frpp data telling us state code info
frpp <- readxl::read_xlsx('FRPP GLC United States.xlsx')
#copy acc in case we need it again
acc2 <- acc
#Need to save as a df first I guess
frpp<-data.frame(frpp)
class(frpp)
colnames(frpp) <- frpp[1,]
frpp <- frpp[-1, ]
head(frpp)
countyPlottingInfo <- map_data("county")
names(frpp)[6] = "COUNTY"
names(frpp)[7] = "County_Name"
frpp$COUNTY = factor(frpp$COUNTY)
acc2$COUNTY = factor(acc2$COUNTY)
names(countyPlottingInfo)[6] = "County_Name"
countacc = inner_join(acc2,frpp, by="COUNTY") %>% select(LATITUDE,LONGITUD,COUNTY,"County_Name",DAY,MONTH,YEAR,HOUR,"State Name")
countacc = countacc %>%
mutate(County_Name = tolower(County_Name))
countaccgroup = countacc %>% group_by(County_Name) %>% summarise(total_crashes = n())
head(countaccgroup)
head(countyPlottingInfo)
countaccgroup = left_join(countaccgroup,countyPlottingInfo, by="County_Name")
# countaccgroup %>% group_by("County_Name") %>% ggplot(aes(x = long.x, y = lat.x, fill=total_crashes)) + geom_polygon(aes(group=group.x))   + guides(fill=guide_legend("Total Crashes"))
countaccgroup %>% group_by("County_Name") %>% ggplot(aes(x = long, y = lat, fill=total_crashes)) + geom_polygon(aes(group=group))   + guides(fill=guide_legend("Total Crashes"))
states <- map_data("state")
accBySzn <- countacc %>%
group_by(County_Name,MONTH) %>%
summarise(total_crashes=n())
accBySzn <- transform(accBySzn, SEASON = case_when((accBySzn$MONTH >= 11 | accBySzn$MONTH <= 3) ~ "WINTER", (accBySzn$MONTH >= 5 & accBySzn$MONTH <= 8) ~ "SUMMER"))
accBySzn = accBySzn[complete.cases(accBySzn[,4]),]
accBySzn = accBySzn %>% group_by(County_Name,SEASON) %>% summarise(total_crash = sum(total_crashes))
accBySzn = accBySzn %>% left_join(counties,by="County_Name")
accBySzn = accBySzn %>% group_by(region,SEASON) %>% summarise(total_crashes=sum(total_crash))
accBySzn = accBySzn %>% spread(SEASON,total_crashes)
accBySzn = accBySzn %>% group_by(region) %>% summarise(ratioSUMbyWINT = SUMMER/WINTER)
accBySzn = accBySzn %>% left_join(states,by="region")
# accBySzn %>% group_by("region")
ggplot(accBySzn, aes(x = long, y = lat,fill=ratioSUMbyWINT)) +
geom_polygon(aes(group=group)) +
guides(fill=guide_legend("Crash Percentage")) +
scale_fill_continuous(low="green",high = ("black"))
returns <- apply(closing_price, 1, function(x) {x / closing_price[1,]}) %>%
t %>% as.xts
install.packages("quantmod")
library(quantmod)
library(ggplot2)
#Define start and End dates
start <- as.Date("2018-01-01")
end <- as.Date("2019-04-02")
?getSymbols
AMD2 <- getSymbols("AMD", src = "yahoo", from = "2017-01-01", to = "2019-04-20", auto.assign = FALSE)
#I tried to add SOX but it failed, I might have the symbol wrong...
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
class(AMD)
head(AMD)
tail(AMD)
head(SPY)
tail(SPY)
head(MU)
tail(MU)
names(MU)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
AMD2 <- data.frame(AMD)
ggplot(AMD, aes(x=index(AMD), y=AMD[,6]))+geom_line(color="black")+scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
ggplot()+
geom_line(data=subset(AAPL.df, date > '2018-01-01'),
aes(x=date, y=AAPL.Close, group=1))
ggplot()+
geom_line(data=subset(AAPL.df, date > '2018-01-01'), aes(x=date, y=AAPL.Close, group=1))
AAPL.df<- data.frame(AMD)
ggplot(AMD, aes(x=index(AMD), y=AMD[,6]))+geom_line(color="black")+scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
amd.df <- data.frame(index(AMD.daily), coredata(AMD.Close), stringsAsFactors = FALSE)
amd.df<- data.frame(AMD)
amd.df <- data.frame(index(AMD.daily), coredata(AMD.Close), stringsAsFactors = FALSE)
returns <- apply(closing_price, 1, function(x) {x / closing_price[1,]}) %>%
t %>% as.xts
plot(as.zoo(returns), screens = 1, lty = 1:3, xlab = "Date", ylab = "Return")
amd.df<- data.frame(AMD)
ggplot(AMD, aes(x=index(AMD), y=AMD[,6]))+geom_line(color="black")+scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
candleChart(AAPL, up.col = "green", dn.col = "red", theme = "white")
candleChart(MU, up.col = "green", dn.col = "red", theme = "white")
candleChart(MU, up.col = "green", dn.col = "red", theme = "black")
candleChart(MU, up.col = "green", dn.col = "red", theme = "white")
install.packages("quantmod")
library(quantmod)
library(ggplot2)
#Define start and End dates
start <- as.Date("2018-01-01")
end <- as.Date("2019-04-23")
?getSymbols
AMD2 <- getSymbols("AMD", src = "yahoo", from = "2017-01-01", to = "2019-04-20", auto.assign = FALSE)
#I tried to add SOX but it failed, I might have the symbol wrong...
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
class(AMD)
head(AMD)
tail(AMD)
head(SPY)
tail(SPY)
head(MU)
tail(MU)
names(MU)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
amd.df<- data.frame(AMD)
ggplot(AMD, aes(x=index(AMD), y=AMD[,6]))+geom_line(color="black")+scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
candleChart(MU, up.col = "green", dn.col = "red", theme = "white")
install.packages("quantmod")
install.packages("quantmod")
library(quantmod)
library(ggplot2)
#Define start and End dates
start <- as.Date("2018-01-01")
end <- as.Date("2019-04-23")
?getSymbols
AMD2 <- getSymbols("AMD", src = "yahoo", from = "2017-01-01", to = "2019-04-20", auto.assign = FALSE)
#I tried to add SOX but it failed, I might have the symbol wrong...
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
class(AMD)
head(AMD)
tail(AMD)
head(SPY)
tail(SPY)
head(MU)
tail(MU)
names(MU)
plot(AAPL[, "AAPL.Close"], main = "AAPL")
amd.df<- data.frame(AMD)
ggplot(AMD, aes(x=index(AMD), y=AMD[,6]))+geom_line(color="black")+scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
candleChart(MU, up.col = "green", dn.col = "red", theme = "white")
library(quantmod)
#Define start and End dates
start <- as.Date("2018-04-23")
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds the simple Moving Average
addSMA(n=20)
library(magrittr)
install.packages("magrittr")
install.packages("magrittr")
library(quantmod)
library(ggplot2)
install.packages("magrittr")
library(magrittr)
#Define start and End dates
start <- as.Date("2018-04-23")
end <- as.Date("2019-04-23")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
install.packages("magrittr")
install.packages("magrittr")
#Adds the simple Moving Average
addSMA(n = 20)
?addSMA
#Adds the simple Moving Average
addMA(n = 20)
#Adds the simple Moving Average
plot(addSMA(n = 20))
addMACD()
addBBands()
install.packages("quantmod")
library(quantmod)
library(ggplot2)
install.packages("magrittr")
library(magrittr)
#Define start and End dates
start <- as.Date("2018-04-23")
end <- as.Date("2019-04-23")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Charts the prices of the SPY 500
candleChart(SPY, up.col="green", dn.col="red", theme="white")
addMACD()
addBBands()
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("quantmod")
library(quantmod)
library(ggplot2)
install.packages("magrittr")
library(magrittr)
#Define start and End dates
start <- as.Date("2018-04-23")
end <- as.Date("2019-04-23")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Charts the prices of the SPY 500
candleChart(SPY, up.col="green", dn.col="red", theme="white")
addMACD()
addBBands()
#Adds the simple Moving Average
plot(addSMA(n = 20))
?addSMA
# install.packages("quantmod")
library(quantmod)
library(ggplot2)
# install.packages("magrittr")
library(magrittr)
#Define start and End dates
start <- as.Date("2018-04-23")
end <- as.Date("2019-04-23")
getSymbols(c("AAPL", "AMD", "SPY", "MU"), src="yahoo", from = start, to = end)
#Charts the prices of the SPY 500
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds the simple moving average
plot(addSMA(n = 20))
candleChart(SPY, up.col="green", dn.col="red", theme="white")
addMACD()
candleChart(SPY, up.col="green", dn.col="red", theme="white")
#Adds Bollinger Bands
addBBands()
seriesHi(SP)
seriesHi(SPY)
chartSeries(SPY)
addMACD()
chartSeries(AMD tpye=candleSticks)
chartSeries(AMD type=candleSticks)
chartSeries(AMD, type=candleSticks)
chartSeries(AMD, type='candleSticks')
chartSeries(AMD, type='candlesticks')
